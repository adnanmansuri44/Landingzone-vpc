---
  AWSTemplateFormatVersion: "2010-09-09"
  Description: "Creates a VPC with Managed NAT, Public/Private subnets"
  Parameters:
    CIDRBlock:
      Type: String
      Default: "172.25.208.0/20"
      Description: "Enter the VPC CIDR Range."
      AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
      MinLength: "9"
      MaxLength: "18"
    VPCName:
      Type: String
      MinLength: "15"
      MaxLength: "15"
      Description: "Type the Name of VPC. Ex. AccountName-VPC-Region and 3rd Octet of CIDR"
      ConstraintDescription: "must be a valid format like MTR01-VPC-IR208."
      Default: "MTR01-VPC-IR208"
  Resources:
    VPC:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock: !Ref CIDRBlock
        Tags:
        -   Key: Name
            Value: !Ref VPCName
    PublicSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: ""
        CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 16, 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,Pub01 ] ]
    WebSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: ""
        CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 16 , 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,Web01 ] ]
    AppSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: ""
        CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 16 , 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,App01 ] ] 
    DBSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: ""
        CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 16 , 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,DB01 ] ]
    TGSubnet1:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: ""
        CidrBlock: !Select [7, !Cidr [!GetAtt VPC.CidrBlock, 16 , 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,TG01 ] ] 
    PublicSubnet2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: ""
        CidrBlock: !Select [8, !Cidr [!GetAtt VPC.CidrBlock, 16 , 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,Pub02 ] ]
    WebSubnet2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: ""
        CidrBlock: !Select [9, !Cidr [!GetAtt VPC.CidrBlock, 16 , 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,Web02 ] ]
    AppSubnet2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: ""
        CidrBlock: !Select [10, !Cidr [!GetAtt VPC.CidrBlock, 16 , 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,App02 ] ]
    DBSubnet2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: ""
        CidrBlock: !Select [11, !Cidr [!GetAtt VPC.CidrBlock, 16 , 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,DB02 ] ] 
    TGSubnet2:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: ""
        CidrBlock: !Select [15, !Cidr [!GetAtt VPC.CidrBlock, 16 , 8]]
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] , !Select [2, !Split ["-", !Ref VPCName]] ,SN,TG02 ] ]
    Role:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: FlowLogRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - 'vpc-flow-logs.amazonaws.com'
            Action: 'sts:AssumeRole'
        Policies:
        - PolicyName: 'flowlogs-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogGroups'
              - 'logs:DescribeLogStreams'
              Resource: "*"
    LogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName : !Join [ "-", [ !Select [0, !Split ["-", !Ref VPCName]] ,VPCFlowlog, !Select [2, !Split ["-", !Ref VPCName]] ] ]
        RetentionInDays: 90              
    vpcflowlog:  
      Type: AWS::EC2::FlowLog
      Properties:
        DeliverLogsPermissionArn: !GetAtt 'Role.Arn'
        LogGroupName: !Ref LogGroup
        ResourceId : !Ref VPC
        ResourceType : VPC
        TrafficType : ALL